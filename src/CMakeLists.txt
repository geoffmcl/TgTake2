#
# DO NOT MODIFY THIS SCRIPT - IT IS AUTOGENERATED
# ===============================================
# If there is a problem, either 'fix' TgTake2.pro,
# or modify the Qt2cmake.pl script accordingly.
# CMakeLists.txt, generated from [src\TgTake2.pro]

cmake_minimum_required( VERSION 2.8.8 )

# CMakeScripts or use the ones that come by default with CMake.
# set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

project( TgTake2 )

# Allow developers to select if Dynamic or static libraries are built.
set( LIB_TYPE STATIC )  # set default static
option( BUILD_SHARED_LIB    "Set ON to build Shared Libraries"      OFF )
option( BUILD_TEST_PROGRAMS "Set ON to build the utility programs"  OFF )

# read 'version' file into a variable (stripping any newlines or spaces)
#file(READ version versionFile)
#if (NOT versionFile)
#    message(FATAL_ERROR "Unable to determine version. version file is missing.")
#endif()
#string(STRIP "${versionFile}" MY_VERSION)
#add_definitions( -DVERSION="${MY_VERSION}" )

# Uncomment to REDUCE the Windows configurations buildable
# set(CMAKE_CONFIGURATION_TYPES "Release;Debug" CACHE STRING "" FORCE) # Disables MinSizeRel & MaxSpeedRel

if(CMAKE_COMPILER_IS_GNUCXX)
    set( WARNING_FLAGS -Wall )
endif(CMAKE_COMPILER_IS_GNUCXX)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
   set( WARNING_FLAGS "-Wall -Wno-overloaded-virtual" )
endif() 

if(WIN32 AND MSVC)
    # turn off various warnings
    set(WARNING_FLAGS "${WARNING_FLAGS} /wd4996")
    # foreach(warning 4244 4251 4267 4275 4290 4786 4305)
    #     set(WARNING_FLAGS "${WARNING_FLAGS} /wd${warning}")
    # endforeach(warning)
    set( MSVC_FLAGS "-DNOMINMAX -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS" )
    # if (${MSVC_VERSION} EQUAL 1600)
    #    set( MSVC_LD_FLAGS "/FORCE:MULTIPLE" )
    # endif ()
    # set( NOMINMAX 1 )
    list(APPEND extra_LIBS ws2_32.lib Winmm.lib)
    # to distinguish between debug and release lib
    set( CMAKE_DEBUG_POSTFIX "d" )
else ()
    # unix stuff
endif()

set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}" )

if( "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8" )
    set(IS_64_BIT 1)
    message(STATUS "*** Seems a 64-bit BUILD")
else ()
    message(STATUS "*** Seems a 32-bit BUILD")
endif ()

if (BUILD_SHARED_LIB)
    set(LIB_TYPE SHARED)
    message(STATUS "*** Building SHARED library...")
else ()
    message(STATUS "*** Building STATIC library...")
endif ()

# QT = core gui
message(STATUS "*** Finding Qt4 components COMPONENTS QtCore QtGui")
find_package ( Qt4 COMPONENTS QtCore QtGui REQUIRED )
include ( ${QT_USE_FILE} )
add_definitions( ${QT_DEFINITIONS} )
# debug messages
message(STATUS "*** include ${QT_USE_FILE}")
message(STATUS "*** defs  ${QT_DEFINITIONS}")
message(STATUS "*** libs ${QT_LIBRARIES}")

set( TgTake2_SRCS
    main.cpp
    mainwindow.cpp
    utilities/utilities.cpp
    tabs/tabsetup.cpp
    tabs/tabelevations.cpp
    tabs/tablanduse.cpp
    tabs/tabairports.cpp
    tabs/tabconstruction.cpp
    tabs/tabadvanced.cpp
    utilities/srtm_utils.cpp
    utilities/srtm_data.cpp
    utilities/newbucket.cpp
    utilities/testExe.cpp
    utilities/workThread.cpp
    utilities/tg_utils.cpp
    )
set( TgTake2_HDRS
    mainwindow.h
    tabs/tabsetup.h
    tabs/tabelevations.h
    tabs/tablanduse.h
    tabs/tabairports.h
    tabs/tabconstruction.h
    tabs/tabadvanced.h
    utilities/workThread.h
    )
set( TgTake2_OTHERS
    app_config.h
    utilities/utilities.h
    settings.h
    utilities/srtm_data.h
    utilities/srtm_utils.h
    utilities/newbucket.h
    utilities/testExe.h
    utilities/tg_utils.h
    utilities/app_macros.h
    )

include_directories(     tabs
    utilities
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${QT_INCLUDE_DIR}
    )
# Added for DEBUG only
get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
message(STATUS "*** inc_dirs = ${inc_dirs}")

QT4_WRAP_CPP( TgTake2_HDRS_MOC ${TgTake2_HDRS} )

add_executable( TgTake2 ${TgTake2_SRCS} ${TgTake2_HDRS_MOC} ${TgTake2_HDRS} ${TgTake2_OTHERS} )
target_link_libraries( TgTake2 ${QT_LIBRARIES} ${extra_LIBS} ${add_LIBS} )
if (MSVC)
    set_target_properties( TgTake2 PROPERTIES DEBUG_POSTFIX d )
endif ()
# deal with install 
install(TARGETS TgTake2 DESTINATION bin )

# eof - original generated by Qt2cmake.pl, v.0.0.7 2015-11-30, on 2016/10/17 00:18:01
