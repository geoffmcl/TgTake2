# 20161017 - Update to use Qt5...
# 20161017 - first auto-gen of this TgTake2 CMakeLists.tct file
# DO NOT MODIFY THIS SCRIPT - IT IS AUTOGENERATED
# ===============================================
# If there is a problem, either 'fix' TgTake2.pro,
# or modify the Qt2cmake.pl script accordingly.
# CMakeLists.txt, generated from [src\TgTake2.pro]

cmake_minimum_required( VERSION 2.8.8 )

# CMakeScripts or use the ones that come by default with CMake.
# set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

project( TgTake2 )

if(COMMAND cmake_policy)
    # Policy CMP0020 is not set: Automatically link Qt executables to qtmain target on Windows. 
    if(POLICY CMP0020)
        cmake_policy(SET CMP0020 NEW)
    endif()
endif()


# Allow developers to select if Dynamic or static libraries are built.
set( LIB_TYPE STATIC )  # set default static
option(BUILD_SHARED_LIB    "Set ON to build Shared Libraries"      OFF )
option(BUILD_TEST_PROGRAMS "Set ON to build the utility programs"  OFF )
option(BUILD_WITH_QT5       "Set OFF to build with Qt4"             ON  )

# read 'version' file into a variable (stripping any newlines or spaces)
#file(READ version versionFile)
#if (NOT versionFile)
#    message(FATAL_ERROR "Unable to determine version. version file is missing.")
#endif()
#string(STRIP "${versionFile}" MY_VERSION)
#add_definitions( -DVERSION="${MY_VERSION}" )

# Uncomment to REDUCE the Windows configurations buildable
# set(CMAKE_CONFIGURATION_TYPES "Release;Debug" CACHE STRING "" FORCE) # Disables MinSizeRel & MaxSpeedRel

if(CMAKE_COMPILER_IS_GNUCXX)
    set( WARNING_FLAGS -Wall )
endif(CMAKE_COMPILER_IS_GNUCXX)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
   set( WARNING_FLAGS "-Wall -Wno-overloaded-virtual" )
endif() 

if(WIN32 AND MSVC)
    # turn off various warnings
    set(WARNING_FLAGS "${WARNING_FLAGS} /wd4996")
    # foreach(warning 4244 4251 4267 4275 4290 4786 4305)
    #     set(WARNING_FLAGS "${WARNING_FLAGS} /wd${warning}")
    # endforeach(warning)
    set( MSVC_FLAGS "-DNOMINMAX -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS" )
    # if (${MSVC_VERSION} EQUAL 1600)
    #    set( MSVC_LD_FLAGS "/FORCE:MULTIPLE" )
    # endif ()
    # set( NOMINMAX 1 )
    list(APPEND extra_LIBS ws2_32.lib Winmm.lib)
    # to distinguish between debug and release lib
    set( CMAKE_DEBUG_POSTFIX "d" )
else ()
    # unix stuff
endif()

set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}" )

if( "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8" )
    set(IS_64_BIT 1)
    message(STATUS "*** Seems a 64-bit BUILD")
else ()
    message(STATUS "*** Seems a 32-bit BUILD")
endif ()

if (BUILD_SHARED_LIB)
    set(LIB_TYPE SHARED)
    message(STATUS "*** Building SHARED library...")
else ()
    message(STATUS "*** Building STATIC library...")
endif ()

# QT = core gui
if (BUILD_WITH_QT5)
    set(CMAKE_AUTOUIC ON)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    message(STATUS "*** Finding Qt5 components Qt5Widget, Qt5Network")
    # find_package ( Qt5 COMPONENTS QtCore REQUIRED )
  	find_package(Qt5Widgets REQUIRED)
	find_package(Qt5Network REQUIRED)
    message(STATUS "Found Q5Widgets, ... ")
else ()
    message(STATUS "*** Finding Qt4 components COMPONENTS QtCore QtGui")
    find_package ( Qt4 COMPONENTS QtCore QtGui REQUIRED )
    include ( ${QT_USE_FILE} )
    add_definitions( ${QT_DEFINITIONS} )
    # debug messages
    message(STATUS "*** include ${QT_USE_FILE}")
    message(STATUS "*** defs  ${QT_DEFINITIONS}")
    message(STATUS "*** libs ${QT_LIBRARIES}")
endif ()

set(name TgTake2)
set( ${name}_SRCS
    src/main.cpp
    src/mainwindow.cpp
    src/utilities/utilities.cpp
    src/tabs/tabsetup.cpp
    src/tabs/tabelevations.cpp
    src/tabs/tablanduse.cpp
    src/tabs/tabairports.cpp
    src/tabs/tabconstruction.cpp
    src/tabs/tabadvanced.cpp
    src/utilities/srtm_utils.cpp
    src/utilities/srtm_data.cpp
    src/utilities/newbucket.cpp
    src/utilities/testExe.cpp
    src/utilities/workThread.cpp
    src/utilities/tg_utils.cpp
    )
set( ${name}_HDRS
    src/mainwindow.h
    src/app_config.h
    src/utilities/utilities.h
    src/tabs/tabsetup.h
    src/tabs/tabelevations.h
    src/tabs/tablanduse.h
    src/tabs/tabairports.h
    src/tabs/tabconstruction.h
    src/tabs/tabadvanced.h
    src/settings.h
    src/utilities/srtm_data.h
    src/utilities/srtm_utils.h
    src/utilities/newbucket.h
    src/utilities/testExe.h
    src/utilities/workThread.h
    src/utilities/tg_utils.h
    src/utilities/app_macros.h
    )

include_directories(     src/tabs
    src
    src/utilities
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${QT_INCLUDE_DIR}
    )
# Added for DEBUG only
get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
message(STATUS "*** inc_dirs = ${inc_dirs}")

if (BUILD_WITH_QT5)
    message(STATUS "*** Build using Qt5")
    # ${TgTake2_HDRS_MOC} 
else ()
    message(STATUS "*** Build using Qt4")
    QT4_WRAP_CPP( TgTake2_HDRS_MOC ${TgTake2_HDRS} )
    list(APPEND ${TgTake2_HDRS} ${TgTake2_HDRS_MOC})
endif ()

add_executable(${name} ${${name}_SRCS} ${${name}_HDRS} )
if (BUILD_WITH_QT5)
	target_link_libraries(${name}
		Qt5::Widgets
		Qt5::Network
        ${extra_LIBS} 
        ${add_LIBS}        
 	)
else ()
    target_link_libraries( ${name} ${QT_LIBRARIES} ${extra_LIBS} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
# deal with install 
install(TARGETS ${name} DESTINATION bin )

# eof - original generated by Qt2cmake.pl, v.0.0.7 2015-11-30, on 2016/10/17 00:19:40
